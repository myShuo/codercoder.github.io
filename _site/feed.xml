<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codercoder</title>
    <description>DBA(Database Administrator), we can share and discuss MySQL, MongoDB, Redis and other databases here, also including learning Python, Shell, Golang together.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 Jan 2023 16:35:32 +0800</pubDate>
    <lastBuildDate>Tue, 17 Jan 2023 16:35:32 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Tips：MongoDB中的embedded document（嵌套文档）查询注意事项</title>
        <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;

&lt;p&gt;最近在查询MongoDB中的数据时，发现查询不到数据，查询语句为：db.person.find({“name”:{&lt;br /&gt;
 last: “Matsumoto”,&lt;br /&gt;
 first: “Yukihiro”&lt;br /&gt;
}})&lt;br /&gt;
数据库中数据为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;{
    &quot;_id&quot; : &amp;lt;value&amp;gt;,
    &quot;name&quot; : { &quot;first&quot; : &amp;lt;string&amp;gt;, &quot;last&quot; : &amp;lt;string&amp;gt; },       // embedded document
    &quot;birth&quot; : &amp;lt;ISODate&amp;gt;,
    &quot;death&quot; : &amp;lt;ISODate&amp;gt;,
    &quot;contribs&quot; : [ &amp;lt;string&amp;gt;, ... ],                           // Array of Strings
    &quot;awards&quot; : [
        { &quot;award&quot; : &amp;lt;string&amp;gt;, year: &amp;lt;number&amp;gt;, by: &amp;lt;string&amp;gt; }  // Array of embedded documents
        ...
    ]
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;问题定位&quot;&gt;问题定位&lt;/h1&gt;

&lt;p&gt;交换“name”中的属性顺序，发现必须与数据库中的一致，才能查询到数据～&lt;/p&gt;

&lt;h2 id=&quot;官方文档&quot;&gt;官方文档&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/11/2020-11-1315.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;The name field must match the embedded document exactly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;果然，在查询嵌套的文档时候，字段顺序需要与存储时候的保持一致，否则会查询不到数据。&lt;br /&gt;
https://docs.mongodb.com/manual/reference/method/db.collection.find/&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2020 18:34:40 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/11/tips-mongodb-find-embedded-document/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/11/tips-mongodb-find-embedded-document/</guid>
        
        <category>MongoDB</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>你真的了解线程池ThreadPoolExecutor吗？</title>
        <description>&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;最近被别人问到有关线程池的问题，自己没有答上来，自己觉得之前还是比较了解线程池的，所以又重新学习了一下这块内容，然后记录一下与大家分享。&lt;/p&gt;

&lt;h3 id=&quot;从两个问题说起&quot;&gt;从两个问题说起&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;线程池线程数增加过程是怎样的？&lt;/li&gt;
  &lt;li&gt;如果线程池线程运行过程中抛异常了，线程池怎么处理该异常线程（是否抛异常、是否回收线程再次利用）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-1&quot;&gt;Part 1:&lt;/h3&gt;

&lt;h4 id=&quot;线程池线程增加逻辑&quot;&gt;线程池线程增加逻辑&lt;/h4&gt;

&lt;p&gt;参考图：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2972.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;如果线程池队列设置为无限大最大线程数还有用吗&quot;&gt;如果线程池队列设置为无限大，最大线程数还有用吗？&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;从图中可以得知，当线程池队列设置为无限大的时候，最大线程数是没有用的，线程池的活跃线程最大就为核心线程数大小。

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jdk线程池为什么要实现成先放队列然后在增加到最大线程数为什么不是像tomcat线程池实现一样先增大到最大线程数在放队列&quot;&gt;JDK线程池为什么要实现成先放队列然后在增加到最大线程数，为什么不是像Tomcat线程池实现一样先增大到最大线程数在放队列?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;自我感觉没有好坏之分，可能适用场景不一样。如果不能容忍延迟，期望应用能尽快的为用户提供服务，就选tomcat实现的，如果能容忍一定的延迟来换取性能上的提升就采用JDK方式。&lt;/li&gt;
  &lt;li&gt;而且也区分应用是CPU密集型还是IO密集型，如果是CPU密集型，是需要线程长时间进行复杂运算，增加线程会造成线程上下文切换频繁，处理速度反而会降低。如果是IO密集型，线程大部分时间是在等待IO读取和写入，增加线程可以提高并发度，处理更多任务。&lt;/li&gt;
  &lt;li&gt;还有一个原因可能就是创建线程addWorker的是时候是需要获取mainLock这个全局锁，影响并发效率，先放队列时候使用到同步队列可以做为一个缓冲。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的是自我的几点理解，如果大家有觉得有更好的理解的，希望补充。&lt;/p&gt;

&lt;h4 id=&quot;如果想要先增加线程到最大之后才放队列怎么做&quot;&gt;如果想要先增加线程到最大之后才放队列怎么做？&lt;/h4&gt;

&lt;h5 id=&quot;两种做法&quot;&gt;两种做法：&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;调整核心线程数大小和最大线程数大小一样&lt;/li&gt;
  &lt;li&gt;就是基于ArrayBlockingQueue实现自己的BlockingQueue，重写其中的offer方法，在里面增加判断如果当前线程数小于最大线程数，则返回false，否则就执行队列自身的offer方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;part-2&quot;&gt;Part 2&lt;/h3&gt;

&lt;h4 id=&quot;线程池线程抛异常了会打印错误日志吗&quot;&gt;线程池线程抛异常了会打印错误日志吗?&lt;/h4&gt;

&lt;p&gt;线程池执行任务分为两种方式，一种execute，一种submit方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是execute方式，则会在&lt;br /&gt;
java.util.concurrent.ThreadPoolExecutor#runWorker中会抛出异常&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2923.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
在java.lang.ThreadGroup#uncaughtException中会将异常打印到控制台&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2985.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;如果是通过submit方式提交，则不会有异常打印，看下submit代码：java.util.concurrent.AbstractExecutorService#submit &lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2968.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
task被包装成一个FutureTask执行，在java.util.concurrent.FutureTask#run方法里看到异常被捕获并没有抛出，而是设置到了对象中一个字段中&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2916.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;线程池线程抛异常了线程会被回收吗&quot;&gt;线程池线程抛异常了线程会被回收吗?&lt;/h4&gt;

&lt;p&gt;答案是线程会被remove掉，然后重新创建一个新的线程加入到线程池&lt;br /&gt;
查看java.util.concurrent.ThreadPoolExecutor#runWorker代码，发现如果抛出异常时候，最后走到java.util.concurrent.ThreadPoolExecutor#processWorkerExit方法，核心代码如下图&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2965.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;如果想要获取到异常怎么办&quot;&gt;如果想要获取到异常怎么办?&lt;/h4&gt;

&lt;h5 id=&quot;两种做法-1&quot;&gt;两种做法：&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;通过submit方式提交时候，future.get时候会抛出异常&lt;/li&gt;
  &lt;li&gt;通过实现线程池java.util.concurrent.ThreadPoolExecutor#afterExecute方式，可以获得到异常信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;为什么线程抛异常被移除之后又会创建一个新的线程加入&quot;&gt;为什么线程抛异常被移除之后又会创建一个新的线程加入？&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;个人理解：可能是为了避免线程池还有任务但是线程异常被移除了之后没有线程在工作了，所以又新创建了一个新的线程到线程池。

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 15:19:34 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/07/know-threadpoolexecutor/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/07/know-threadpoolexecutor/</guid>
        
        <category>Java</category>
        
        <category>线程池</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>手记&amp;#8211;InfluxDB使用介绍</title>
        <description>&lt;p&gt;话说上次说把设备状态信息上报到influxDB进行存储，即存储设备的监控信息，既然说了介绍InfluxDB的使用，那这次就按数据库使用维护的角度，介绍下时序数据库InfluxDB。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-247.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通常说到数据库会说到库、表、行，这在influxDB中对应database、measurement、point，当然还有时序数据特有的timestamp，以及过期策略：Retention Policy。此外，还有其特别的结构：&lt;br /&gt;
 &lt;strong&gt;Point：&lt;/strong&gt;Series + timestamp&lt;br /&gt;
 &lt;strong&gt;Series：&lt;/strong&gt;按照同一个database中，Series = retention policy + measument + tag set相同，即为相同series&lt;br /&gt;
 &lt;strong&gt;Shard：&lt;/strong&gt;在我们设定Retention Policy的时候，往往就会看到shard关键字，其体现为：一个retention policy下，会根据其设定，拆分为很多个部分，而这些部分，则为shard。&lt;/p&gt;

&lt;p&gt;InfluxDB的存储引擎为TSM（从LSM+timestamp演变），每一个SHARD，都对应一个TSM存储引擎，有独立的cache、wal、tsm file。（LSM树结构后续再说，又有下次的主题了:grin:）&lt;br /&gt;
https://www.influxdata.com/blog/new-storage-engine-time-structured-merge-tree/&lt;br /&gt;
https://docs.influxdata.com/influxdb/v1.8/concepts/storage_engine/&lt;/p&gt;

&lt;h1 id=&quot;一常见操作&quot;&gt;一、常见操作&lt;/h1&gt;

&lt;p&gt;上次设备监控上报的时候 (&lt;strong&gt;文末公众号：涂鸦玩法2 — 设备状态存储展示&lt;/strong&gt;)，简单介绍了如下的SQL：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ influx -host 127.0.0.1 -port 8089 -username admin -password 123421
Connected to http://127.0.0.1:8089 version 1.8.1
InfluxDB shell version: 1.8.1
​
&amp;gt; show databases;
name: databasesname
----
_internal
wstestdb
​
&amp;gt; use wstestdb
Using database wstestdb
​
&amp;gt; select time,pir,dev_id from pir_status  limit 3;
name: pir_status
time                pir dev_id
----                --- ------
1594810825095426778 0   z{&amp;amp;#140;y{_Z
1594810835293097585 0   z{&amp;amp;#140;y{_Z
1594810845430362859 1   z{&amp;amp;#140;y{_Z

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此外，influxDB本身也支持http POST的方式进行数据的操作。例如：&lt;br /&gt;
&lt;strong&gt;插入：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl -i -XPOST 'http://localhost:8083/write?db=mydb' --data-binary 'cpu_load_short,host=server02 value=0.67

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl -GET 'http://localhost:8086/query?pretty=true' --data-urlencode &quot;db=mydb&quot; --data-urlencode &quot;q=SELECT value FROM cpu_load_short WHERE region='us'&quot;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于运维人员，需要额外关注一些其它信息。&lt;/p&gt;

&lt;h1 id=&quot;二基础运维&quot;&gt;二、基础运维&lt;/h1&gt;

&lt;h2 id=&quot;21-retention-policy-数据保留策略&quot;&gt;2.1 Retention Policy 数据保留策略&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;（1）创建：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;create RETENTION POLICY &quot;wstestdb_1d&quot; ON &quot;wstestdb&quot; DURATION 1d  REPLICATION 1 SHARD DURATION 1d  ;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里可以看到上部分提到的SHARD DURATION，在一个保留策略里，需要设定好过期的时间，还有SHARD的周期，influxDB会按照这个周期拆分、过期数据文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）修改：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt; show retention policies
name    duration shardGroupDuration replicaN default
----    -------- ------------------ -------- -------
autogen 0s       168h0m0s           1        true
​

&amp;gt; alter RETENTION POLICY &quot;autogen&quot; ON &quot;wstestdb&quot; DURATION 200w REPLICATION 1  SHARD DURATION 1d DEFAULT

&amp;gt; show retention policies
name    duration   shardGroupDuration replicaN default
----    --------   ------------------ -------- -------
autogen 33600h0m0s 24h0m0s            1        true
​

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通常生产环境中，我们会针对不同类型的measurement，采用不同的retention policy，例如：&lt;strong&gt;精度高的表保留3个月，精度低的表保留3年等。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-持续查询-continuous-queries&quot;&gt;2.2 持续查询 Continuous Queries&lt;/h2&gt;

&lt;p&gt;InfluxDB深知自己使用的环境，例如在很久以前的数据，&lt;strong&gt;大部分用户只关注类似平均值、最大最小值等的情况，而历史的大量数据，会使成本大幅度提高&lt;/strong&gt;。此时，就出现了持续查询：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;CREATE continuous query cq_30 ON &quot;mydb&quot; RESAMPLE EVERY 15m FOR 60m BEGIN select mean(value) into mean_value from cpu_load_short group by time(30m) END

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即把cpu_load_short表的每15分钟平均值，存放在一张新表mean_value中。&lt;/p&gt;

&lt;p&gt;这样，&lt;strong&gt;Retention Policy加上Continuous Queries，可以在精度和持续性上达到一个平衡。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;三influxdb的文件&quot;&gt;三、InfluxDB的文件&lt;/h1&gt;

&lt;h2 id=&quot;31-文件目录分布&quot;&gt;3.1 文件目录分布&lt;/h2&gt;

&lt;p&gt;InfluxDB的文件结构较为简单（上次说到，在配置文件中的不同板块进行配置）：&lt;br /&gt;
 &lt;strong&gt;data：&lt;/strong&gt;数据文件目录&lt;br /&gt;
 &lt;strong&gt;meta：&lt;/strong&gt;数据库元信息&lt;br /&gt;
 &lt;strong&gt;wal：&lt;/strong&gt;Write Ahead Log目录&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2449.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
重点关注数据文件目录，更便于我们去理解和使用InfluxDB。&lt;/p&gt;

&lt;h2 id=&quot;32-数据目录&quot;&gt;3.2 数据目录&lt;/h2&gt;

&lt;p&gt;数据目录下，每一个database，分为单独的目录；在不同的database下，不同的retention policy，又分别位于不同的目录下：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2465.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;特别注意，“_series”目录，用以存放series索引：&lt;br /&gt;
 &lt;strong&gt;（1）必须在配置中限制series的数目，防止大量的series导致OOM的情况&lt;/strong&gt;&lt;br /&gt;
 &lt;strong&gt;（2）当series数据太大时，需要及时处理&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-retention-policy与shard在文件上的体现&quot;&gt;3.3 Retention Policy与SHARD在文件上的体现&lt;/h2&gt;

&lt;p&gt;查看_interval库的retention policies：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt; use _internal
Using database _internal

&amp;gt; show retention policies
name    duration shardGroupDuration replicaN default
----    -------- ------------------ -------- -------
monitor 168h0m0s 24h0m0s            1        true

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对应的文件目录：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2470.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，&lt;strong&gt;文件是按照每24h进行分割的，即Retention Policy中的SHARD DURATION的大小进行，同样，在168h后，将会进行过期处理&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;四influxdb的配置&quot;&gt;四、InfluxDB的配置&lt;/h1&gt;

&lt;h2 id=&quot;41-基础配置&quot;&gt;4.1 基础配置&lt;/h2&gt;

&lt;p&gt;通常我们会修改如下几项：&lt;br /&gt;
 &lt;strong&gt;占用内存的大小：&lt;/strong&gt;cache-max-memory-size = “2g”&lt;br /&gt;
 &lt;strong&gt;并发查询数：&lt;/strong&gt;max-concurrent-queries = 1000&lt;br /&gt;
 &lt;strong&gt;慢查询阈值：&lt;/strong&gt;log-queries-after = “3s”&lt;br /&gt;
 &lt;strong&gt;metadata/数据文件地址：&lt;/strong&gt;[meta]、[data]中的dir&lt;br /&gt;
 &lt;strong&gt;端口地址：&lt;/strong&gt;bind-address&lt;/p&gt;

&lt;h2 id=&quot;42-业务实用性配置&quot;&gt;4.2 业务实用性配置&lt;/h2&gt;

&lt;p&gt;根据前三部分的介绍，还需关注：&lt;br /&gt;
 &lt;strong&gt;series相关配置：&lt;/strong&gt;&lt;br /&gt;
 例如：max-series-per-database、max-select-series&lt;br /&gt;
 &lt;strong&gt;TSM引擎：&lt;/strong&gt;&lt;br /&gt;
 例如：compact-full-write-cold-duration&lt;br /&gt;
 &lt;strong&gt;SHARD相关：&lt;/strong&gt;&lt;br /&gt;
 例如：cache-snapshot-write-cold-duration、compact-full-write-cold-duration&lt;br /&gt;
 &lt;strong&gt;timeout相关：&lt;/strong&gt;&lt;br /&gt;
 例如：连接超时、查询超时等等&lt;/p&gt;

&lt;p&gt;同所有关系型数据库一样，数据库的配置，需要根据业务的使用场景进行适时的调整和优化，已得到更融合的体系。&lt;/p&gt;

&lt;p&gt;欢迎关注公众号：&lt;strong&gt;朔的话&lt;/strong&gt;：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/04/2020-04-2693.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2020 23:08:37 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/07/note-influxdb-introduction/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/07/note-influxdb-introduction/</guid>
        
        <category>influxdb</category>
        
        <category>手记</category>
        
        <category>时序数据库</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySQL手记23 &amp;#8212; MySQL运行情况统计小工具mysqltuner</title>
        <description>&lt;p&gt;无意中发现一个小工具，perl语言开发的mysqltuner.pl，可以用来展示MySQL实例的状态：&lt;/p&gt;

&lt;p&gt;Github地址：https://github.com/major/MySQLTuner-perl&lt;/p&gt;

&lt;h1 id=&quot;运行结果&quot;&gt;运行结果&lt;/h1&gt;

&lt;p&gt;如下图所示，运行结果将会按照分类进行分块展示，后文将进行分析讨论：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2020.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;测试情况&quot;&gt;测试情况&lt;/h1&gt;

&lt;p&gt;下面展示我在测试环境MySQL8.0的情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt;&amp;gt;  MySQLTuner 1.7.19 - Major Hayden &amp;lt;major@mhtx.net&amp;gt;
 &amp;gt;&amp;gt;  Bug reports, feature requests, and downloads at http://mysqltuner.com/
 &amp;gt;&amp;gt;  Run with '--help' for additional options and output filtering
​
[--] Skipped version check for MySQLTuner script
[--] Performing tests on 127.0.0.1:4406
[OK] Logged in using credentials passed on the command line
Argument &quot;&quot; isn't numeric in numeric ge (&amp;gt;=) at mysqltuner.pl line 302 (#1)
    (W numeric) The indicated string was fed as an argument to an operator
    that expected a numeric value instead.  If you're fortunate the message
    will identify which operator was so unfortunate.
​
[OK] Currently running supported MySQL version 8.0.17
[OK] Operating on 64-bit architecture
​
-------- Log file Recommendations ------------------------------------------------------------------
[!!] Log file /tmp/4406-error.log doesn't exist
​
-------- Storage Engine Statistics -----------------------------------------------------------------
[--] Status: +ARCHIVE +BLACKHOLE +CSV -FEDERATED +InnoDB +MEMORY +MRG_MYISAM +MyISAM +PERFORMANCE_SCHEMA
[--] Data in InnoDB tables: 146.6M (Tables: 1889)
[OK] Total fragmented tables: 0
​
-------- Analysis Performance Metrics --------------------------------------------------------------
[--] innodb_stats_on_metadata: OFF
[OK] No stat updates during querying INFORMATION_SCHEMA.
​
-------- Security Recommendations ------------------------------------------------------------------
[--] Skipped due to unsupported feature for MySQL 8
​
-------- CVE Security Recommendations --------------------------------------------------------------
[--] Skipped due to --cvefile option undefined
​
-------- Performance Metrics -----------------------------------------------------------------------
[--] Up for: 2d 19h 43m 16s (62K q [0.257 qps], 276 conn, TX: 23M, RX: 10M)
[--] Reads / Writes: 98% / 2%
[--] Binary logging is enabled (GTID MODE: ON)
[--] Physical Memory     : 8.0G
[--] Max MySQL memory    : 12.8G
[--] Other process memory: 0B
[--] Total buffers: 784.0M global + 24.6M per thread (500 max threads)
[--] P_S Max memory usage: 72B
[--] Galera GCache Max memory usage: 0B
[OK] Maximum reached memory usage: 857.9M (10.47% of installed RAM)
[!!] Maximum possible memory usage: 12.8G (160.01% of installed RAM)
[!!] Overall possible memory usage with other process exceeded memory
[OK] Slow queries: 2% (1K/62K)
[OK] Highest usage of available connections: 0% (3/500)
[!!] Aborted connections: 14.86%  (41/276)
[--] Query cache have been removed in MySQL 8
[OK] Sorts requiring temporary tables: 0% (0 temp sorts / 1K sorts)
[!!] Joins performed without indexes: 3013
[OK] Temporary tables created on disk: 0% (0 on disk / 4K total)
[OK] Thread cache hit rate: 98% (3 created / 276 connections)
[OK] Table cache hit rate: 61% (2K open / 3K opened)
[!!] table_definition_cache(2000) is lower than number of tables(2194) 
[OK] Open file limit used: 0% (39/1M)
[OK] Table locks acquired immediately: 100% (480 immediate / 480 locks)
[OK] Binlog cache memory access: 100.00% (4255 Memory / 4255 Total)
​
-------- Performance schema ------------------------------------------------------------------------
[--] Memory used by P_S: 72B
[--] Sys schema is installed.
​
-------- ThreadPool Metrics ------------------------------------------------------------------------
[--] ThreadPool stat is disabled.
​
-------- MyISAM Metrics ----------------------------------------------------------------------------
[--] MyISAM Metrics are disabled on last MySQL versions.
​
-------- InnoDB Metrics ----------------------------------------------------------------------------
[--] InnoDB is enabled.
[--] InnoDB Thread Concurrency: 0
[OK] InnoDB File per table is activated
[OK] InnoDB buffer pool / data size: 512.0M/146.6M
[!!] Ratio InnoDB log file size / InnoDB Buffer pool size (18.75 %): 48.0M * 2/512.0M should be equal to 25%
[OK] InnoDB buffer pool instances: 1
[--] Number of InnoDB Buffer Pool Chunk : 4 for 1 Buffer Pool Instance(s)
[OK] Innodb_buffer_pool_size aligned with Innodb_buffer_pool_chunk_size &amp;amp; Innodb_buffer_pool_instances
[OK] InnoDB Read buffer efficiency: 100.00% (123128483 hits/ 123129674 total)
[OK] InnoDB Write log efficiency: 92.19% (2024330 hits/ 2195892 total)
[OK] InnoDB log waits: 0.00% (0 waits / 171562 writes)
​
-------- AriaDB Metrics ----------------------------------------------------------------------------
[--] AriaDB is disabled.
​
-------- TokuDB Metrics ----------------------------------------------------------------------------
[--] TokuDB is disabled.
​
-------- XtraDB Metrics ----------------------------------------------------------------------------
[--] XtraDB is disabled.
​
-------- Galera Metrics ----------------------------------------------------------------------------
[--] Galera is disabled.
​
-------- Replication Metrics -----------------------------------------------------------------------
[--] Galera Synchronous replication: NO
[--] No replication slave(s) for this server.
[--] Binlog format: ROW
[--] XA support enabled: ON
[--] Semi synchronous replication Master: Not Activated
[--] Semi synchronous replication Slave: Not Activated
[--] This is a standalone server
​
-------- Recommendations ---------------------------------------------------------------------------
General recommendations:
Reduce your overall MySQL memory footprint for system stability
Dedicate this server to your database for highest performance.
Reduce or eliminate unclosed connections and network issues
We will suggest raising the 'join_buffer_size' until JOINs not using indexes are found.
See https://dev.mysql.com/doc/internals/en/join-buffer-size.html
             (specially the conclusions at the bottom of the page).
Before changing innodb_log_file_size and/or innodb_log_files_in_group read this: https://bit.ly/2TcGgtU
Variables to adjust:
  *** MySQL's maximum memory usage is dangerously high ***
  *** Add RAM before increasing MySQL buffer variables ***
    join_buffer_size (&amp;gt; 8.0M, or always use indexes with JOINs)
    table_definition_cache(2000) &amp;gt; 2194 or -1 (autosizing if supported)
    innodb_log_file_size should be (=64M) if possible, so InnoDB total log files size equals to 25% of buffer pool size.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;结果分析&quot;&gt;结果分析&lt;/h1&gt;

&lt;p&gt;分析结果分为如下几个部分：&lt;/p&gt;

&lt;h2 id=&quot;1-实例基本信息&quot;&gt;1. 实例基本信息&lt;/h2&gt;

&lt;p&gt;版本、实例系统配置简介等&lt;/p&gt;

&lt;h2 id=&quot;2-storage-engine-statistics&quot;&gt;2. Storage Engine Statistics&lt;/h2&gt;

&lt;p&gt;存储引擎统计信息&lt;br /&gt;
 Innodb表的数目、总大小&lt;/p&gt;

&lt;h2 id=&quot;3-analysis-performance-metrics&quot;&gt;3. Analysis Performance Metrics&lt;/h2&gt;

&lt;p&gt;innodb_stats_on_metadata开启情况&lt;/p&gt;

&lt;h2 id=&quot;4-performance-metrics&quot;&gt;4. Performance Metrics&lt;/h2&gt;

&lt;p&gt;性能相关的统计信息：&lt;br /&gt;
 uptime、QPS、读写操作情况&lt;br /&gt;
 binlog是否开启？&lt;br /&gt;
 内存情况、buffer缓存情况&lt;br /&gt;
 慢查比例&lt;br /&gt;
 连接情况&lt;br /&gt;
 临时表创建情况&lt;br /&gt;
 open files&lt;br /&gt;
 获取锁等待的情况&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;（乍眼一看，指标和我们平时看的MySQL监控大同小异，PMM提供的面板中，也是这些个指标：&lt;a href=&quot;http://codercoder.cn/index.php/2020/04/mysql-note-9-percona-monitoring-management/&quot;&gt;MySQL手记9 — Percona Monitoring Management（PMM监控）&lt;/a&gt;]&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-performance-schema&quot;&gt;5. Performance schema&lt;/h2&gt;

&lt;p&gt;P_S使用内存的情况&lt;/p&gt;

&lt;h2 id=&quot;6-threadpool-metrics&quot;&gt;6. ThreadPool Metrics&lt;/h2&gt;

&lt;p&gt;是否打开线程池&lt;/p&gt;

&lt;h2 id=&quot;7-myisam-metricsariadb-metricstokudb-metricsxtradb-metricsgalera-metrics&quot;&gt;7. MyISAM Metrics、AriaDB Metrics、TokuDB Metrics、XtraDB Metrics、Galera Metrics&lt;/h2&gt;

&lt;p&gt;各种存储引擎情况&lt;/p&gt;

&lt;h2 id=&quot;8-innodb-metrics&quot;&gt;8. InnoDB Metrics&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;InnoDB情况&lt;/strong&gt;&lt;br /&gt;
 是否开启InnoDB File per table&lt;br /&gt;
 InnoDB buffer pool / data size&lt;br /&gt;
 InnoDB buffer pool instances数目&lt;br /&gt;
 InnoDB读写效率&lt;/p&gt;

&lt;h2 id=&quot;9-replication-metrics&quot;&gt;9. Replication Metrics：&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;复制情况：&lt;/strong&gt;&lt;br /&gt;
 Binlog format: ROW&lt;br /&gt;
 Slave情况&lt;br /&gt;
 是否半同步&lt;/p&gt;

&lt;h2 id=&quot;10-recommendation&quot;&gt;10. Recommendation:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Log file Recommendations&lt;/strong&gt;&lt;br /&gt;
 例如本例中提示：Log file /tmp/4406-error.log doesn’t exist&lt;br /&gt;
 &lt;strong&gt;Security Recommendations&lt;/strong&gt;&lt;br /&gt;
 由于我使用的是MySQL8.0版本，所以本项不支持，跳过&lt;br /&gt;
 &lt;strong&gt;CVE Security Recommendations&lt;/strong&gt;&lt;br /&gt;
 Skipped due to –cvefile option undefined&lt;/p&gt;

&lt;h2 id=&quot;汇总的recommendation&quot;&gt;汇总的Recommendation：&lt;/h2&gt;

&lt;p&gt;降低MySQL内存使用率，以提高系统稳定性&lt;br /&gt;
 由于我的实例为单实例，所以建议组建高可用集群&lt;br /&gt;
 减少或消除未封闭的连接和网络问题&lt;/p&gt;

&lt;h2 id=&quot;建议调整的参数&quot;&gt;建议调整的参数：&lt;/h2&gt;

&lt;p&gt;Variables to adjust:&lt;br /&gt;
 *** MySQL’s maximum memory usage is dangerously high ***&lt;br /&gt;
MySQL实例可用的内存，配置太高，可能会发生OOM&lt;br /&gt;
 *** Add RAM before increasing MySQL buffer variables ***&lt;br /&gt;
（在调高buffer相关配置前，先升级内存）&lt;br /&gt;
 &lt;strong&gt;join_buffer_size&lt;/strong&gt; (&amp;gt; 8.0M, or always use indexes with JOINs)&lt;br /&gt;
 &lt;strong&gt;table_definition_cache&lt;/strong&gt;(2000) &amp;gt; 2194 or -1 (autosizing if supported)&lt;br /&gt;
 &lt;strong&gt;innodb_log_file_size&lt;/strong&gt; should be (=64M) if possible, so InnoDB total log files size equals to 25% of buffer pool size.&lt;br /&gt;
​&lt;/p&gt;

&lt;p&gt;ps.&lt;br /&gt;
这个项目github上的一个FAQ:)&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/07/2020-07-2047.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;欢迎关注公众号：&lt;strong&gt;朔的话&lt;/strong&gt;：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/04/2020-04-2693.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2020 23:01:27 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/07/mysql-note-23-mysqltuner/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/07/mysql-note-23-mysqltuner/</guid>
        
        <category>MySQL手记</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySQL手记22 &amp;#8212; Tips：不走索引就锁全表数据吗？</title>
        <description>&lt;p&gt;今天和小伙伴讨论到：&lt;br /&gt;
 如果MySQL的加锁，没有走索引，走全表扫描的话，那么加锁是把所有的数据行都锁住，还是只锁住符合where条件的数据？&lt;br /&gt;
 确实，我们在工作中经常提醒开发人员，让SQL都能走索引，以使得加锁的范围越小越好。所以这个问题，还需要看一个方面：&lt;strong&gt;事务的隔离级别&lt;/strong&gt;。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-1223.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;repeatable_read隔离级别&quot;&gt;Repeatable_Read隔离级别&lt;/h1&gt;

&lt;p&gt;表结构：name字段没有索引，在name字段上进行update操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;CREATE TABLE if not exists `test3` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8
​
mysql&amp;amp;gt; select * from test3;
+----+-----------+
| id | name      |
+----+-----------+
|  1 | aaa       |
|  2 | bbb       |
|  3 | ccc333ccc |
|  4 | ddd       |
|  5 | eee       |
+----+-----------+
5 rows in set (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开启一个事务，执行update进行加锁：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; begin;
Query OK, 0 rows affected (0.01 sec)
​
​
mysql&amp;amp;gt; update test3 set name='abc' where name='ccc333ccc';
Query OK, 1 row affected (0.02 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看当前加锁的情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root:information_schema&amp;amp;gt; select * from INNODB_TRX \G
*************************** 1. row ***************************
                    trx_id: 458026
                 trx_state: RUNNING
               trx_started: 2020-06-12 05:00:40
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 3
       trx_mysql_thread_id: 972
                 trx_query: NULL
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 6
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: REPEATABLE READ
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者可使用**show engine innodb status **查看：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;------------
TRANSACTIONS
------------
Trx id counter 458027
Purge done for trx's n:o &amp;amp;lt; 458010 undo n:o  begin;
Query OK, 0 rows affected (0.00 sec)
​
root:wstestdb&amp;amp;gt; update test3 set name
----等待

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个事务执行后，处于等待状态，此时查看加锁的情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select * from information_schema.INNODB_TRX \G
*************************** 1. row ***************************
                    trx_id: 458027
                 trx_state: LOCK WAIT
               trx_started: 2020-06-12 05:10:27
     trx_requested_lock_id: 458027:77:3:2
          trx_wait_started: 2020-06-12 05:10:27
                trx_weight: 2
       trx_mysql_thread_id: 993
                 trx_query: update test3 set name='abc' where name='eee'
       trx_operation_state: starting index read
         trx_tables_in_use: 1
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 1
         trx_rows_modified: 0
   trx_concurrency_tickets: 0
       trx_isolation_level: REPEATABLE READ
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
*************************** 2. row ***************************
                    trx_id: 458026
                 trx_state: RUNNING
               trx_started: 2020-06-12 05:00:40
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 3
       trx_mysql_thread_id: 972
                 trx_query: select * from information_schema.INNODB_TRX
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 6
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: REPEATABLE READ
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
2 rows in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个事务的状态显示：&lt;strong&gt;trx_state: LOCK WAIT&lt;/strong&gt;，即由于不能马上获得锁，所以需要等待。&lt;/p&gt;

&lt;h2 id=&quot;结果二&quot;&gt;结果二：&lt;/h2&gt;

&lt;p&gt;即使第二个事务中，update的是不同的行，但是由于name字段上没有索引，所以InnoDB需要对所有的行及间隙上锁，所以会出现“LOCK WAIT”的状态。&lt;/p&gt;

&lt;h1 id=&quot;read-committed隔离级别&quot;&gt;Read-Committed隔离级别&lt;/h1&gt;

&lt;p&gt;由于RC隔离级别是没有GAP锁的，所以在进行加锁的时候，只会对于符合条件的数据进行加锁：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)
​
​
mysql&amp;amp;gt; update test3 set name='abc' where name='ccc333ccc';
Query OK, 1 row affected (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看此时的加锁情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select * from information_schema.INNODB_TRX \G
*************************** 1. row ***************************
                    trx_id: 458034
                 trx_state: RUNNING
               trx_started: 2020-06-12 06:15:58
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 3
       trx_mysql_thread_id: 998
                 trx_query: select * from information_schema.INNODB_TRX
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 1
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: READ COMMITTED
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
1 row in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个session执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;root:wstestdb&amp;amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)
​
​
root:wstestdb&amp;amp;gt; update test3 set name='abc' where name='eee';
Query OK, 1 row affected (0.01 sec)
​

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结果一&quot;&gt;结果一：&lt;/h2&gt;

&lt;p&gt;可以看出，第二个session也是能够成功执行的，因为更改的是不同的行。&lt;/p&gt;

&lt;p&gt;查看加锁的情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select * from information_schema.INNODB_TRX \G
*************************** 1. row ***************************
                    trx_id: 458035
                 trx_state: RUNNING
               trx_started: 2020-06-12 06:16:22
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 3
       trx_mysql_thread_id: 997
                 trx_query: NULL
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 2
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: READ COMMITTED
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
*************************** 2. row ***************************
                    trx_id: 458034
                 trx_state: RUNNING
               trx_started: 2020-06-12 06:15:58
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 3
       trx_mysql_thread_id: 998
                 trx_query: select * from information_schema.INNODB_TRX
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 1
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: READ COMMITTED
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
trx_adaptive_hash_latched: 0
trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
2 rows in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;这个例子也是“不可重复读”的一个体现：&lt;br /&gt;
 RC：没走索引时，可以更新不同的行&lt;br /&gt;
 RR：没走索引时，不可以更新不同的行&lt;/p&gt;

&lt;p&gt;在RC级别下，虽然只更新了一行数据update test3 set name=’abc’ where name=’ccc333ccc’;，但是提交之后，再进行查询时，得到name=‘eee’的这行数据也被更新了。&lt;br /&gt;
 而RR级别通过GAP锁，防止其它的session更新所有的行与间隙，从而得到了一个可重复读取的结果。&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jun 2020 19:07:19 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/06/mysql-note-22-tips-lock-status-when-not-using-index/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/06/mysql-note-22-tips-lock-status-when-not-using-index/</guid>
        
        <category>MySQL手记</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySQL手记21 &amp;#8212; MySQL的分库分表</title>
        <description>&lt;h1 id=&quot;一基本情况&quot;&gt;一、基本情况&lt;/h1&gt;

&lt;p&gt;随着数据量的增多，往往带来数据库的负载加大，有时甚至会影响线上的正常业务，在此情况下，常有几种解决方案：数据归档、配置升级、数据拆分。对于数据库表的拆分，又分为：垂直拆分、水平拆分。&lt;br /&gt;
 垂直拆分：将不同业务需要访问到的库，分在不同的数据库实例下，以降低单个实例的负载&lt;br /&gt;
 水平拆分：常见两种方案：分库不分表、分库加分表&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-115.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
（图片来源https://www.digitalocean.com/community/tutorials/understanding-database-sharding）&lt;/p&gt;

&lt;p&gt;数据归档：对于数据量或QPS较为稳定，不会“爆棚式”增长的库表，还有可能是公司内部难以推动或者关联较多导致拆分的环境，而可以采用的临时解决方案。&lt;br /&gt;
 升级配置：将数据库所在的硬件设施进行升级，以便于更好的支撑当前的数据环境&lt;br /&gt;
​ &lt;br /&gt;
由于数据归档、升级配置两种方案的思路很简单，不过多介绍，这里就说一些注意事项：&lt;br /&gt;
&lt;strong&gt;（1）数据下游&lt;/strong&gt;&lt;br /&gt;
若下游有数据订阅，或者离线的任务，那么：&lt;br /&gt;
 &lt;strong&gt;数据归档：&lt;/strong&gt;部分业务可能会存在离线任务，那么离线任务的时间需要和归档时间错开，防止造成较高的负载；&lt;br /&gt;
 &lt;strong&gt;订阅任务：&lt;/strong&gt;需要判断是否需要过滤归档产生的DELETE语句（归档产生的DELETE的量可能会随数据量的大小，而变得很大，影响订阅的通道，造成订阅阻塞或者延迟较大的影响）&lt;br /&gt;
 &lt;strong&gt;实例配置升级：&lt;/strong&gt;大部分情况，进行实例配置的升级，涉及到新老实例的切换，会影响binlog的位点，在切换后，更改订阅的binlog的位点信息&lt;br /&gt;
所以下游有订阅任务时，需要进行调整切换的时间，应错开离线、归档任务&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）数据归档注意事项查阅：&lt;/strong&gt;&lt;a href=&quot;http://codercoder.cn/index.php/2019/09/mysql-archive-tool-pt-archiver/&quot;&gt;MySQL手记11 — MySQL归档工具：pt-archiver&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;（3）配置升级可参考：&lt;/strong&gt;&lt;a href=&quot;http://codercoder.cn/index.php/2020/04/mysql-note-14-attention-when-migrating-data/&quot;&gt;MySQL手记14 — 数据迁移注意事项&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;二数据库拆分&quot;&gt;二、数据库拆分&lt;/h1&gt;

&lt;h2 id=&quot;21-垂直拆分&quot;&gt;2.1 垂直拆分&lt;/h2&gt;

&lt;p&gt;将不同业务所需要访问的库表进行拆分，不同的业务访问不同的库表，访问其他业务的数据库表，则通过程序接口调用方式进行。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-1135.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-水平拆分&quot;&gt;2.2 水平拆分&lt;/h2&gt;

&lt;h3 id=&quot;1-仅分库&quot;&gt;1. 仅分库&lt;/h3&gt;

&lt;p&gt;例如，应用A访问db1库的db1表，此时将db1拆分为16个库：db1_0 ~ db1_15，每个库中仅有一个同名表tb1。应用则通过分库的规则访问到不同的数据库实例。&lt;/p&gt;

&lt;h3 id=&quot;2-分库分表&quot;&gt;2. 分库分表&lt;/h3&gt;

&lt;p&gt;例如，应用A访问db-1，此时将db1拆分为16个库16个表：db1_0 ~ db1_15，每个数据库中有16个表：tb0 ~ tb15。应用则通过分库分表的规则访问到不同的数据库实例下的不同表。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-1119.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-仅分库-or-分库分表&quot;&gt;3. 仅分库 or 分库分表？&lt;/h3&gt;

&lt;h4 id=&quot;1数据量qps是否会大幅度上升&quot;&gt;（1）数据量、QPS是否会大幅度上升?&lt;/h4&gt;

&lt;p&gt;数据量、QPS上升，业务量飞速上涨，以至于实例升配等的方案很有可能在短期内出现硬件的瓶颈，所以需要提前将数据库表进行拆分。&lt;br /&gt;
（&lt;strong&gt;数据库巡检：通常我们会对数据库进行巡检。每个一段时间，统计各个数据库大表信息，讨论是否需要进行拆分处理。&lt;/strong&gt;）&lt;/p&gt;

&lt;h4 id=&quot;2当前是否出现查询缓慢的瓶颈&quot;&gt;（2）当前是否出现查询缓慢的瓶颈？&lt;/h4&gt;

&lt;p&gt;对于出现慢查的环境，DBA因首先进行SQL或者结构的优化，尽量降低慢查数，使当前的配置能够尽可能支撑更多的查询。&lt;/p&gt;

&lt;h4 id=&quot;3业务对于响应速度的要求&quot;&gt;（3）业务对于响应速度的要求？&lt;/h4&gt;

&lt;p&gt;部分边缘的业务，哪怕是数据量很大，但是由于其对数据库的响应速度要求不高，需要根据需求判断。&lt;/p&gt;

&lt;h1 id=&quot;三分表分库&quot;&gt;三、分表分库&lt;/h1&gt;

&lt;h2 id=&quot;31-拆分前准备工作&quot;&gt;3.1 拆分前准备工作&lt;/h2&gt;

&lt;p&gt;对于数据库来说，做拆分之前一定要做足充分的准备，再拆分迁移后，分表分库的环境是很难进行回滚的。&lt;br /&gt;
&lt;strong&gt;（1）分库分表算法：&lt;/strong&gt;&lt;br /&gt;
先按库取模，再按照表取模&lt;br /&gt;
按照总表的数目取模…&lt;/p&gt;

&lt;p&gt;计算需要拆分为多少个库表，评估业务量，根据目前环境中的QPS与配置的比例，从而得到需要的实例的数目.&lt;/p&gt;

&lt;p&gt;例如：&lt;br /&gt;
 业务量为最大20万的QPS（其中读、写各占一半），当前环境16核64GB的实例QPS为2万：可拆分为16个库，每个库一个16核64GB实例，这样，最终每个实例的最大QPS的量为20万/16&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同时，采用读写分离的方式，添加多个只读节点，分散主库压力&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）选取分片键&lt;/strong&gt;&lt;br /&gt;
 谨慎选择分片键，使业务尽量为分片键上的等值查询。&lt;br /&gt;
 &lt;strong&gt;分片键上的范围查询（应避免）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（3）分表的数目 &amp;amp; 运维复杂度&lt;/strong&gt;&lt;br /&gt;
分库分表，意味着更高的运维复杂度。各种对于子表的操作，都需要完善的流程进行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（4）子表上的结构变更？怎么验证？&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;（5）雪花算法生成整型递增主键&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;（6）数据下游&lt;/strong&gt;&lt;br /&gt;
 订阅、同步任务&lt;br /&gt;
 需要接入多个数据源&lt;br /&gt;
 离线任务&lt;br /&gt;
 从不同的数据源进行拉取，再聚合&lt;/p&gt;

&lt;h2 id=&quot;32-数据同步&quot;&gt;3.2 数据同步&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;（1）历史数据迁移&lt;/strong&gt;&lt;br /&gt;
 按照分表分库的规则，使用数据库中间价，将数据分批次迁移到目标端。应用常用的分表分库方案有：Sharding-JDBC，对于数据库分库分表中间件，可以用同一产品的分支：Sharding-Proxy。该项目从4.0版本开始，已经收录为了Apache的项目，start的数据也在升高（https://github.com/apache/shardingsphere）。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-117.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
 对于Sharding-Proxy，配置数据库分表分库的路由，即可将数据按规则分发到对应的分表中，并且兼容基本的MySQL语法。&lt;br /&gt;
 全量同步，可直接将数据dump为sql文件，再通过Sharding-Proxy进行回放。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）增量同步&lt;/strong&gt;&lt;br /&gt;
 在全量数据迁移时，记录下binlog位点，然后从该位点开始进行增量同步，使用binlog订阅的方式，将源端的binlog在目标端回放。&lt;br /&gt;
 对于源端的数据库配置注意事项，例如：binlog_format=ROW、binlog_row_image=full等的配置项，可参照：http://codercoder.cn/index.php/2020/04/mysql-note-14-attention-when-migrating-data/&lt;/p&gt;

&lt;p&gt;对于binlog的同步：&lt;br /&gt;
 （1）可在源端订阅binlog，解析得到的SQL，在目标端执行&lt;br /&gt;
 （2）使用同步工具，例如：阿里开源的binlog订阅和消费组件—-&lt;strong&gt;&lt;a href=&quot;https://github.com/alibaba/canal&quot;&gt;canal, MySQL binlog 增量订阅&amp;amp;消费组件&lt;/a&gt;&lt;/strong&gt;；或是阿里的另一个开源项目&lt;strong&gt;&lt;a href=&quot;https://github.com/alibaba/otter&quot;&gt;otter,分布式数据库同步系统&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;（ps.对比了阿里云、微软云、AWS、腾讯云的数据同步服务，其实哪怕是在商业的解决方案里，阿里云的数据同步方案是灵活性最高，并且兼容性最好的）&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/2020-06-1173.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-数据校验&quot;&gt;3.3 数据校验&lt;/h2&gt;

&lt;p&gt;在数据同步后，需要对数据进行校验，常用的方式有：&lt;br /&gt;
 a.按照主键，分批次逐行对比（效率低，结果精确）&lt;br /&gt;
 b.对比源端和目标端的数据行数&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;MySQL的分库分表死活业内常用的数据库拆分手段，能够解决绝大部分的“核心大表”情况。但是分库分表后，若需要进行再次拆分，运维难度就会很大，所以在初期制定时，就要估计好数据量、QPS等的情况，并作出一定冗余。&lt;br /&gt;
 此外，对于分库分表的运维，由于其复杂度增大，也需要有一套完善的平台进行，降低“人肉运维”出错几率。&lt;br /&gt;
 若出现了分库分表也支撑不起的业务，那么就可以考虑其它类型的数据库，近年来很火热的分布式数据库不失为一个很好的选择。&lt;/p&gt;

&lt;p&gt;后续将会详细介绍“数据同步”、“数据库代理Sharding-Proxy”等内容，敬请期待。&lt;/p&gt;

&lt;p&gt;欢迎关注公众号：&lt;strong&gt;朔的话&lt;/strong&gt;：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/04/2020-04-2693.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jun 2020 19:59:18 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/06/mysql-note-21-mysql-sharding-table/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/06/mysql-note-21-mysql-sharding-table/</guid>
        
        <category>MySQL手记</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>如何将图片导入到Oracle数据库</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;主要介绍使用Oracle函数包dbms_lob如何将图片存到数据库里面。关于函数的更多用法可以阅读官方文档(https://docs.oracle.com/cd/E11882_01/timesten.112/e21645/d_lob.htm#TTPLP600)&lt;/p&gt;

&lt;h2 id=&quot;建立测试表&quot;&gt;建立测试表&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Creating&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=============================&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;BLOB&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'测试数据表'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'照片唯一ID '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'照片'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- alter table T_PIC_1 add constraint PK_T_PIC_1 primary key (ID);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEQ_T_PIC_1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;================================&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEQ_T_PIC_1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;minvalue&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;maxvalue&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999999999999999999999999999&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;图片路径&quot;&gt;图片路径&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[oracle@db-Bbo8Jg1B zp]$ pwd
/home/oracle/zp
[oracle@db-Bbo8Jg1B zp]$ ls -lrt
-rw-r--r-- 1 root root 42775 Jun  2 13:56 20200602135647.jpg
-rw-r--r-- 1 root root 44189 Jun  2 13:59 20200602135648.jpg

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;建立逻辑目录&quot;&gt;建立逻辑目录&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home/oracle/zp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;入库方式&quot;&gt;入库方式&lt;/h2&gt;

&lt;h3 id=&quot;特定命名规则循环入库&quot;&gt;特定命名规则循环入库&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bbo8Jg1B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bbo8Jg1B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;$img&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bbo8Jg1B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--r-- 1 oracle oinstall 42775 Jun  2 13:56 1.jpg&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--r-- 1 oracle oinstall 44189 Jun  2 13:59 2.jpg&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bbo8Jg1B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlplus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u_test1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;declare&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;l_blob&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- 确认好表与表字段&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty_blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- 照片的命名必须为规则的从1到10w,如:10.jpg , IMAGES代表逻辑目录名称&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bfilename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'IMAGES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbms_lob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbms_lob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadfromfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbms_lob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbms_lob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_bfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 可自行调整为单次commit或者批量commit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以使用PLSQL去查看下表：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/12324d464198d259d380b71ea8ddb469.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用存储过程的方式入库&quot;&gt;使用存储过程的方式入库&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMG_INSERT_ACS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILENAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;B_LOB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*+ append */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T_PIC_1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ID通过调用序列SEQ_T_PIC_1取唯一自增值,IMAGES代表逻辑目录名称&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_T_PIC_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMPTY_BLOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BFILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'IMAGES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DBMS_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILEOPEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBMS_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILE_READONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DBMS_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOADFROMFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBMS_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GETLENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DBMS_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILECLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_LOB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- Call the procedure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;img_insert_acs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再去通过PLSQL查看表：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/06/b7a8b549c1cdb36cc508be3a4afe8ac4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jun 2020 14:32:24 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/06/pic_to_db/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/06/pic_to_db/</guid>
        
        <category>Oracle</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySQL手记20 &amp;#8212; MySQL Group Replication(MGR组复制)</title>
        <description>&lt;h1 id=&quot;一简介&quot;&gt;一、简介&lt;/h1&gt;

&lt;p&gt;MGR（MySQL Group Replication）是MySQL原生的数据库集群架构，底层使用Paxos协议实现多写、选举等过程，目前最大支持9个节点。可分为单写（Single-Primary）、多写（Multiple-Primary）两类集群，虽然能够多写，但是还是建议单写，因为多写需要有选举的过程，在节点较多、或者网络环境较差的情况下，会严重影响性能。官方work有相关的测试报告：http://mysqlhighavailability.com/zooming-in-on-group-replication-performance/&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2789.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;二安装部署&quot;&gt;二、安装部署&lt;/h1&gt;

&lt;h2 id=&quot;1数据库配置&quot;&gt;（1）数据库配置&lt;/h2&gt;

&lt;p&gt;在启动前，需要修改启动的配置文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;#gtid
gtid_mode=on
enforce_gtid_consistency=on
binlog_checksum=none
transaction_write_set_extraction    = XXHASH64
loose-group_replication_group_name  = &quot;8cb61fd9-8931-11ea-ad6f-0242ac110003&quot;
loose_group_replication_single_primary_mode = 0    #0:single-primary; 1:multiple-primary
loose-group_replication_start_on_boot = OFF
loose_group_replication_compression_threshold = 100
loose_group_replication_flow_control_mode = 0
loose-group_replication_bootstrap_group = OFF
loose_group_replication_enforce_update_everywhere_checks =true   #single-primary需设为关闭，multiple-primary则必须打开，主要是使（serialized隔离级别的事务，或者是使事务中有外键关系的表的）事务失败
loose-group_replication_transaction_size_limit = 10485760     #事务的大小，若太大，则会影响集群的性能
loose_group_replication_unreachable_majority_timeout = 120
loose-group_replication_auto_increment_increment = 7   #自增值的跨度大小
loose-group_replication_local_address=&quot;172.21.0.2:15501&quot;    #当前主机的ip，可动态修改
loose-group_replication_group_seeds='172.21.0.2:15501,172.21.0.4:15503,172.21.0.3:15502'   ##集群中所有节点的信息，可动态修改
loose_group_replication_ip_whitelist='172.21.0.4,172.21.0.2,172.21.0.3'  #节点的ip白名单，可动态修改

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中loose开头的为group replication安装插件时候启动的配置。MGR不支持binlog_checksum，切gtid必须打开。&lt;/p&gt;

&lt;h2 id=&quot;2添加插件&quot;&gt;（2）添加插件&lt;/h2&gt;

&lt;p&gt;Group Replication是以插件的形式加入到集群中的，所以需要进行插件的安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; INSTALL PLUGIN group_replication SONAME 'group_replication.so';
​
mysql&amp;gt; SHOW PLUGINS;
+---------------------------------+----------+--------------------+----------------------+---------+
| Name                            | Status   | Type               | Library              | License |
+---------------------------------+----------+--------------------+----------------------+---------+
...
| group_replication               | ACTIVE   | GROUP REPLICATION  | group_replication.so | GPL     |
+---------------------------------+----------+--------------------+----------------------+---------+

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-启动第一个节点&quot;&gt;a. 启动第一个节点&lt;/h3&gt;

&lt;p&gt;第一个节点启动时，需要先设置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;SET GLOBAL group_replication_bootstrap_group=ON;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即表示该节点为运行集群中的第一个节点，启动Group Replication：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;START GROUP_REPLICATION;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;日志中打印的信息为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_applier' executed'. Previous state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;b-启动第二个节点&quot;&gt;b .启动第二个节点&lt;/h3&gt;

&lt;p&gt;在第二个节点执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;START GROUP_REPLICATION;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于集群中已经有第一个节点，所以不需要再设置group_replication_bootstrap_group=on&lt;br /&gt;
日志：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_applier' executed'. Previous state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''.
[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_recovery' executed'. Previous state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='70b353672cdc', master_port= 5501, master_log_file='', master_log_pos= 4, master_bind=''.
[Warning] [MY-010897] [Repl] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
2020-05-22T07:34:16.119089-00:00 27 [System] [MY-010562] [Repl] Slave I/O thread for channel 'group_replication_recovery': connected to master 'root@70b353672cdc:5501',replication started in log 'FIRST' at position 4
[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_recovery' executed'. Previous state master_host='70b353672cdc', master_port= 5501, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看第二个节点的添加情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; select * from performance_schema.replication_group_members;
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| group_replication_applier | e3f0850e-8936-11ea-98ba-0242ac150004 | 2bd38a52527e |        5502 | ONLINE       | PRIMARY     | 8.0.20         |
| group_replication_applier | e4a14f46-8936-11ea-b379-0242ac150005 | 70b353672cdc |        5501 | ONLINE       | PRIMARY     | 8.0.20         |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
2 rows in set (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启group replication时，状态为RECOVERY:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; select * from performance_schema.replication_group_members;
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| group_replication_applier | e3f0850e-8936-11ea-98ba-0242ac150004 | 2bd38a52527e |        5502 | RECOVERING   | PRIMARY     | 8.0.20         |
| group_replication_applier | e4a14f46-8936-11ea-b379-0242ac150005 | 70b353672cdc |        5501 | ONLINE       | PRIMARY     | 8.0.20         |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
2 rows in set (0.03 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;c-添加第三个节点&quot;&gt;c. 添加第三个节点&lt;/h3&gt;

&lt;p&gt;直接执行start group_replication;，打印日志为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[Warning] [MY-011735] [Repl] Plugin group_replication reported: '[GCS] Automatically adding IPv4 localhost address to the whitelist. It is mandatory that it is added.'
[Warning] [MY-011735] [Repl] Plugin group_replication reported: '[GCS] Automatically adding IPv6 localhost address to the whitelist. It is mandatory that it is added.'
[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_applier' executed'. Previous state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''.
[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_recovery' executed'. Previous state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='70b353672cdc', master_port= 5501, master_log_file='', master_log_pos= 4, master_bind=''.
[Warning] [MY-010897] [Repl] Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[System] [MY-010562] [Repl] Slave I/O thread for channel 'group_replication_recovery': connected to master 'root@70b353672cdc:5501',replication started in log 'FIRST' at position 4
[System] [MY-010597] [Repl] 'CHANGE MASTER TO FOR CHANNEL 'group_replication_recovery' executed'. Previous state master_host='70b353672cdc', master_port= 5501, master_log_file='', master_log_pos= 4, master_bind=''. New state master_host='&amp;lt;NULL&amp;gt;', master_port= 0, master_log_file='', master_log_pos= 4, master_bind=''.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过以上的日志可以看出，在各个节点启动的时候，均会有CHANGE MASTER TO FOR CHANNEL …的操作。&lt;/p&gt;

&lt;p&gt;完成后，查看集群中节点的状态，查看集群的状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; SELECT * FROM performance_schema.replication_group_members;
​
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| group_replication_applier | e0dd6e3d-8936-11ea-9176-0242ac150003 | 7bcecb1807d5 |        5503 | ONLINE       | PRIMARY     | 8.0.20         |
| group_replication_applier | e3f0850e-8936-11ea-98ba-0242ac150004 | 2bd38a52527e |        5502 | ONLINE       | PRIMARY     | 8.0.20         |
| group_replication_applier | e4a14f46-8936-11ea-b379-0242ac150005 | 70b353672cdc |        5501 | ONLINE       | PRIMARY     | 8.0.20         |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
3 rows in set (0.02 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;三mgr相关参数&quot;&gt;三、MGR相关参数&lt;/h1&gt;

&lt;p&gt;MGR为了保证数据的一致性以及提升集群的性能，用户可进行相关的配置，当前版本8.0.20：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; show variables like '%group_repl%';
+-----------------------------------------------------+----------------------------------------------------+
| Variable_name                                       | Value                                              |
+-----------------------------------------------------+----------------------------------------------------+
| group_replication_allow_local_lower_version_join    | OFF                                                |
| group_replication_auto_increment_increment          | 7                                                  |
| group_replication_autorejoin_tries                  | 0                                                  |
| group_replication_bootstrap_group                   | OFF                                                |
| group_replication_clone_threshold                   | 9223372036854775807                                |
| group_replication_communication_debug_options       | GCS_DEBUG_NONE                                     |
| group_replication_communication_max_message_size    | 10485760                                           |
| group_replication_components_stop_timeout           | 31536000                                           |
| group_replication_compression_threshold             | 100                                                |
| group_replication_consistency                       | EVENTUAL                                           |
| group_replication_enforce_update_everywhere_checks  | ON                                                 |
| group_replication_exit_state_action                 | READ_ONLY                                          |
| group_replication_flow_control_applier_threshold    | 25000                                              |
| group_replication_flow_control_certifier_threshold  | 25000                                              |
| group_replication_flow_control_hold_percent         | 10                                                 |
| group_replication_flow_control_max_quota            | 0                                                  |
| group_replication_flow_control_member_quota_percent | 0                                                  |
| group_replication_flow_control_min_quota            | 0                                                  |
| group_replication_flow_control_min_recovery_quota   | 0                                                  |
| group_replication_flow_control_mode                 | DISABLED                                           |
| group_replication_flow_control_period               | 1                                                  |
| group_replication_flow_control_release_percent      | 50                                                 |
| group_replication_force_members                     |                                                    |
| group_replication_group_name                        | 8cb61fd9-8931-11ea-ad6f-0242ac110003               |
| group_replication_group_seeds                       | 172.21.0.2:15501,172.21.0.4:15503,172.21.0.3:15502 |
| group_replication_gtid_assignment_block_size        | 1000000                                            |
| group_replication_ip_whitelist                      | 172.21.0.4,172.21.0.2,172.21.0.3,172.21.0.5        |
| group_replication_local_address                     | 172.21.0.3:15502                                   |
| group_replication_member_expel_timeout              | 0                                                  |
| group_replication_member_weight                     | 50                                                 |
| group_replication_message_cache_size                | 1073741824                                         |
| group_replication_poll_spin_loops                   | 0                                                  |
| group_replication_recovery_complete_at              | TRANSACTIONS_APPLIED                               |
| group_replication_recovery_compression_algorithms   | uncompressed                                       |
| group_replication_recovery_get_public_key           | OFF                                                |
| group_replication_recovery_public_key_path          |                                                    |
| group_replication_recovery_reconnect_interval       | 60                                                 |
| group_replication_recovery_retry_count              | 10                                                 |
| group_replication_recovery_ssl_ca                   |                                                    |
| group_replication_recovery_ssl_capath               |                                                    |
| group_replication_recovery_ssl_cert                 |                                                    |
| group_replication_recovery_ssl_cipher               |                                                    |
| group_replication_recovery_ssl_crl                  |                                                    |
| group_replication_recovery_ssl_crlpath              |                                                    |
| group_replication_recovery_ssl_key                  |                                                    |
| group_replication_recovery_ssl_verify_server_cert   | OFF                                                |
| group_replication_recovery_tls_ciphersuites         |                                                    |
| group_replication_recovery_tls_version              | TLSv1,TLSv1.1,TLSv1.2,TLSv1.3                      |
| group_replication_recovery_use_ssl                  | OFF                                                |
| group_replication_recovery_zstd_compression_level   | 3                                                  |
| group_replication_single_primary_mode               | OFF                                                |
| group_replication_ssl_mode                          | DISABLED                                           |
| group_replication_start_on_boot                     | OFF                                                |
| group_replication_transaction_size_limit            | 10485760                                           |
| group_replication_unreachable_majority_timeout      | 120                                                |
+-----------------------------------------------------+----------------------------------------------------+
55 rows in set (0.12 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中：&lt;br /&gt;
&lt;strong&gt;group_replication_enforce_update_everywhere_checks=ON&lt;/strong&gt;&lt;br /&gt;
 该MGR集群为multiple-primary，即多主的集群，其中较为重要的参数配置：&lt;br /&gt;
&lt;strong&gt;group_replication_consistency=EVENTUAL&lt;/strong&gt;&lt;br /&gt;
 事务一致性等级配置，本实例的配置为：在执行”读”或者”写”事务之前，不用等待之前的事务完成。即看到的是其它事务开始前的快照。&lt;br /&gt;
 使用EVENTUAL，由于不需要进行等待其它事务的完成，所以可以获得较高的性能。当然，为了得到更高的事务一致性，还有其它配置可供选择，并且支持session级别的修改。&lt;br /&gt;
http://codercoder.cn/index.php/2019/09/innodb-cluster-mgr-group_replication_consistency/&lt;br /&gt;
&lt;strong&gt;group_replication_exit_state_action=READ_ONLY&lt;/strong&gt;&lt;br /&gt;
 从8.0.12开始加入该参数，节点非正常退出集群后记性的操作，非正常退出，包括：异常退出、由于网络等其它问题重试group_replication_autorejoin_tries次数之后，还是未能重新加入集群。为了防止异常的节点还能被访问，或者重新加入集群后影响正常的数据。所以提供此参数进行配置。&lt;/p&gt;

&lt;p&gt;集群的基本连接信息，也可在实例启动后通过&lt;strong&gt;set global xxx&lt;/strong&gt;进行配置：&lt;br /&gt;
&lt;strong&gt;group_replication_start_on_boot&lt;/strong&gt;&lt;br /&gt;
 是否自动启动group_replication&lt;br /&gt;
&lt;strong&gt;group_replication_group_name&lt;/strong&gt;&lt;br /&gt;
 当前集群的名称&lt;br /&gt;
&lt;strong&gt;group_replication_group_seeds&lt;/strong&gt;&lt;br /&gt;
 集群中的节点信息&lt;br /&gt;
&lt;strong&gt;group_replication_ip_whitelist&lt;/strong&gt;&lt;br /&gt;
 节点所在机器的ip白名单&lt;br /&gt;
&lt;strong&gt;group_replication_local_address&lt;/strong&gt;&lt;br /&gt;
 当前节点的地址&lt;/p&gt;

&lt;h1 id=&quot;四mgr相关表&quot;&gt;四、MGR相关表&lt;/h1&gt;

&lt;p&gt;MGR相关的表，是存储在performance_schema库下的，两张表：&lt;br /&gt;
&lt;strong&gt;replication_group_members&lt;/strong&gt;：用以存储MGR集群的节点信息&lt;br /&gt;
&lt;strong&gt;replication_group_member_stats&lt;/strong&gt;：用以存储节点的状态信息，执行的事务数等&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; use performance_schema
Database changed
​
mysql&amp;gt; show tables like '%group%';
+----------------------------------------+
| Tables_in_performance_schema (%group%) |
+----------------------------------------+
| replication_group_member_stats         |
| replication_group_members              |
+----------------------------------------+
2 rows in set (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1replication_group_members表&quot;&gt;（1）replication_group_members表&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; select * from replication_group_members ;
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
| group_replication_applier | e0dd6e3d-8936-11ea-9176-0242ac150003 | 7bcecb1807d5 |        5503 | ONLINE       | PRIMARY     | 8.0.20         |
| group_replication_applier | e3f0850e-8936-11ea-98ba-0242ac150004 | 2bd38a52527e |        5502 | ONLINE       | PRIMARY     | 8.0.20         |
| group_replication_applier | e4a14f46-8936-11ea-b379-0242ac150005 | 70b353672cdc |        5501 | ONLINE       | PRIMARY     | 8.0.20         |
+---------------------------+--------------------------------------+--------------+-------------+--------------+-------------+----------------+
3 rows in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看出，该MGR集群一共三个节点，并且均为PRIMARY，MEMBER_STATE均为ONLINE状态，即三个节点均在正常运行。其中：MEMBER_HOST显示了三个节点的hostname，MEMBER_PORT为对应的端口。&lt;/p&gt;

&lt;h2 id=&quot;2replication_group_member_stats表&quot;&gt;（2）replication_group_member_stats表&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; show create table replication_group_member_stats \G
*************************** 1. row ***************************
       Table: replication_group_member_stats
Create Table: CREATE TABLE if not exists `replication_group_member_stats` (
  `CHANNEL_NAME` char(64) NOT NULL,
  `VIEW_ID` char(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `MEMBER_ID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `COUNT_TRANSACTIONS_IN_QUEUE` bigint unsigned NOT NULL,
  `COUNT_TRANSACTIONS_CHECKED` bigint unsigned NOT NULL,
  `COUNT_CONFLICTS_DETECTED` bigint unsigned NOT NULL,
  `COUNT_TRANSACTIONS_ROWS_VALIDATING` bigint unsigned NOT NULL,
  `TRANSACTIONS_COMMITTED_ALL_MEMBERS` longtext NOT NULL,
  `LAST_CONFLICT_FREE_TRANSACTION` text NOT NULL,
  `COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE` bigint unsigned NOT NULL,
  `COUNT_TRANSACTIONS_REMOTE_APPLIED` bigint unsigned NOT NULL,
  `COUNT_TRANSACTIONS_LOCAL_PROPOSED` bigint unsigned NOT NULL,
  `COUNT_TRANSACTIONS_LOCAL_ROLLBACK` bigint unsigned NOT NULL
) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;各个字段的介绍：&lt;br /&gt;
 &lt;strong&gt;CHANNEL_NAME&lt;/strong&gt;：Name of the Group Replication channel&lt;br /&gt;
 各个节点的名称&lt;br /&gt;
 &lt;strong&gt;VIEW_ID&lt;/strong&gt;：Current view identifier for this group.&lt;br /&gt;
 当前MGR集群的view id&lt;br /&gt;
 &lt;strong&gt;MEMBER_ID&lt;/strong&gt;：The member server UUID. This has a different value for each member in the group. This also serves as a key because it is unique to each member.&lt;br /&gt;
 不同成员的UUID，每个集群中的成员UUID唯一&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_IN_QUEUE&lt;/strong&gt;：The number of transactions in the queue pending conflict detection checks. Once the transactions have been checked for conflicts, if they pass the check, they are queued to be applied as well.&lt;br /&gt;
 队列中等待冲突检测检查的事务数。一旦检查了事务是否存在冲突，待通过检查，则将它们排队等待应用。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_CHECKED&lt;/strong&gt;：The number of transactions that have been checked for conflicts.&lt;br /&gt;
 已检查有冲突的事务数。&lt;br /&gt;
 &lt;strong&gt;COUNT_CONFLICTS_DETECTED&lt;/strong&gt;：The number of transactions that have not passed the conflict detection check.&lt;br /&gt;
 尚未通过冲突检测检查的事务数。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_ROWS_VALIDATING&lt;/strong&gt;： Number of transaction rows which can be used for certification, but have not been garbage collected. Can be thought of as the current size of the conflict detection database against which each transaction is certified.&lt;br /&gt;
 可以用于认证但尚未被垃圾回收的交易行数。可以认为是每个事务都针对其进行认证的冲突检测数据库的当前大小。&lt;br /&gt;
 &lt;strong&gt;TRANSACTIONS_COMMITTED_ALL_MEMBERS&lt;/strong&gt;：The transactions that have been successfully committed on all members of the replication group, shown as GTID Sets. This is updated at a fixed time interval.&lt;br /&gt;
 在复制组的所有成员上已成功提交的事务，显示为 GTID Sets。这将以固定的时间间隔进行更新。&lt;br /&gt;
 &lt;strong&gt;LAST_CONFLICT_FREE_TRANSACTION&lt;/strong&gt;：The transaction identifier of the last conflict free transaction which was checked.&lt;br /&gt;
 最后检查的无冲突交易的交易标识符。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE&lt;/strong&gt;：The number of transactions that this member has received from the replication group which are waiting to be applied.&lt;br /&gt;
 该成员已从复制组收到的等待应用的事务数。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_REMOTE_APPLIED&lt;/strong&gt;：Number of transactions this member has received from the group and applied.&lt;br /&gt;
 该成员已从该组收到并应用的交易数。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_LOCAL_PROPOSED&lt;/strong&gt;：Number of transactions which originated on this member and were sent to the group.&lt;br /&gt;
 起源于此成员并发送到该组的交易数量。&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_LOCAL_ROLLBACK&lt;/strong&gt;：Number of transactions which originated on this member and were rolled back by the group.&lt;br /&gt;
 该成员发起并被该组回滚的事务数。&lt;/p&gt;

&lt;p&gt;ps.注意：不能在replication_group_member_stats表上执行truncate table 命令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select * from replication_group_member_stats;

| CHANNEL_NAME              | VIEW_ID             | MEMBER_ID                            | COUNT_TRANSACTIONS_IN_QUEUE | COUNT_TRANSACTIONS_CHECKED | COUNT_CONFLICTS_DETECTED | COUNT_TRANSACTIONS_ROWS_VALIDATING | TRANSACTIONS_COMMITTED_ALL_MEMBERS                                                                                  | LAST_CONFLICT_FREE_TRANSACTION          | COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE | COUNT_TRANSACTIONS_REMOTE_APPLIED | COUNT_TRANSACTIONS_LOCAL_PROPOSED | COUNT_TRANSACTIONS_LOCAL_ROLLBACK |

| group_replication_applier | 15903747614426007:3 | e0dd6e3d-8936-11ea-9176-0242ac150003 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-43:1000020-1000167:2000020-2000037,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                                21 |                               146 |                                 0 |
| group_replication_applier | 15903747614426007:3 | e3f0850e-8936-11ea-98ba-0242ac150004 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-43:1000020-1000167:2000020-2000037,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                               151 |                                17 |                                 0 |
| group_replication_applier | 15903747614426007:3 | e4a14f46-8936-11ea-b379-0242ac150005 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-43:1000020-1000167:2000020-2000037,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                               166 |                                 4 |                                 0 |

3 rows in set (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3replication_group_member_stats表字段分类&quot;&gt;（3）replication_group_member_stats表字段分类&lt;/h2&gt;

&lt;p&gt;可以简单把replication_group_member_stats表的字段分为两类：&lt;/p&gt;

&lt;h3 id=&quot;a-基础信息&quot;&gt;a. 基础信息&lt;/h3&gt;

&lt;p&gt;查看replication_group_member_stats表的数据情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select CHANNEL_NAME,VIEW_ID,MEMBER_ID,TRANSACTIONS_COMMITTED_ALL_MEMBERS from replication_group_member_stats;
+---------------------------+---------------------+--------------------------------------+-------------------------------------------------------------------------------------------------------------+
| CHANNEL_NAME              | VIEW_ID             | MEMBER_ID                            | TRANSACTIONS_COMMITTED_ALL_MEMBERS                                                                          |
+---------------------------+---------------------+--------------------------------------+-------------------------------------------------------------------------------------------------------------+
| group_replication_applier | 15903747614426007:3 | e0dd6e3d-8936-11ea-9176-0242ac150003 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-39:1000020-1000021:2000020,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 |
| group_replication_applier | 15903747614426007:3 | e3f0850e-8936-11ea-98ba-0242ac150004 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-39:1000020-1000021:2000020,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 |
| group_replication_applier | 15903747614426007:3 | e4a14f46-8936-11ea-b379-0242ac150005 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:1-39:1000020-1000021:2000020,
e4a14f46-8936-11ea-b379-0242ac150005:1-5 |
+---------------------------+---------------------+--------------------------------------+-------------------------------------------------------------------------------------------------------------+
3 rows in set (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这几个字段展示了CHANNEL_NAME、成员信息、当前已提交的事务id。均属于基础信息类。&lt;/p&gt;

&lt;h2 id=&quot;b计数类&quot;&gt;b.计数类&lt;/h2&gt;

&lt;p&gt;查看当前状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select MEMBER_ID,COUNT_TRANSACTIONS_IN_QUEUE,COUNT_TRANSACTIONS_CHECKED,COUNT_CONFLICTS_DETECTED,COUNT_TRANSACTIONS_ROWS_VALIDATING,LAST_CONFLICT_FREE_TRANSACTION,COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE,COUNT_TRANSACTIONS_REMOTE_APPLIED,COUNT_TRANSACTIONS_LOCAL_PROPOSED,COUNT_TRANSACTIONS_LOCAL_ROLLBACK from replication_group_member_stats;
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| MEMBER_ID                            | COUNT_TRANSACTIONS_IN_QUEUE | COUNT_TRANSACTIONS_CHECKED | COUNT_CONFLICTS_DETECTED | COUNT_TRANSACTIONS_ROWS_VALIDATING | LAST_CONFLICT_FREE_TRANSACTION               | COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE | COUNT_TRANSACTIONS_REMOTE_APPLIED | COUNT_TRANSACTIONS_LOCAL_PROPOSED | COUNT_TRANSACTIONS_LOCAL_ROLLBACK |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| e0dd6e3d-8936-11ea-9176-0242ac150003 |                           0 |                        166 |                        0 |                                 18 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:2000037 |                                          0 |                                20 |                               146 |                                 0 |
| e3f0850e-8936-11ea-98ba-0242ac150004 |                           0 |                        166 |                        0 |                                 18 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:2000037 |                                          0 |                               150 |                                17 |                                 0 |
| e4a14f46-8936-11ea-b379-0242ac150005 |                           0 |                        166 |                        0 |                                 18 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:2000037 |                                          0 |                               166 |                                 3 |                                 0 |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
3 rows in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在5501节点（member_id=e4a14f46-8936-11ea-b379-0242ac150005）插入一条数据&lt;/strong&gt;，再次查看：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; insert into t2 values(6);
Query OK, 1 row affected (0.04 sec)
​
mysql&amp;amp;gt; select MEMBER_ID,COUNT_TRANSACTIONS_IN_QUEUE,COUNT_TRANSACTIONS_CHECKED,COUNT_CONFLICTS_DETECTED,COUNT_TRANSACTIONS_ROWS_VALIDATING,LAST_CONFLICT_FREE_TRANSACTION,COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE,COUNT_TRANSACTIONS_REMOTE_APPLIED,COUNT_TRANSACTIONS_LOCAL_PROPOSED,COUNT_TRANSACTIONS_LOCAL_ROLLBACK from replication_group_member_stats;
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| MEMBER_ID                            | COUNT_TRANSACTIONS_IN_QUEUE | COUNT_TRANSACTIONS_CHECKED | COUNT_CONFLICTS_DETECTED | COUNT_TRANSACTIONS_ROWS_VALIDATING | LAST_CONFLICT_FREE_TRANSACTION               | COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE | COUNT_TRANSACTIONS_REMOTE_APPLIED | COUNT_TRANSACTIONS_LOCAL_PROPOSED | COUNT_TRANSACTIONS_LOCAL_ROLLBACK |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| e0dd6e3d-8936-11ea-9176-0242ac150003 |                           0 |                        167 |                        0 |                                 19 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:2000037 |                                          0 |                                21 |                               146 |                                 0 |
| e3f0850e-8936-11ea-98ba-0242ac150004 |                           0 |                        167 |                        0 |                                 19 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43      |                                          0 |                               151 |                                17 |                                 0 |
| e4a14f46-8936-11ea-b379-0242ac150005 |                           0 |                        167 |                        0 |                                 19 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:2000037 |                                          0 |                               166 |                                 4 |                                 0 |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+----------------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
3 rows in set (0.01 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;过一段时间，再次查询：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;amp;gt; select MEMBER_ID,COUNT_TRANSACTIONS_IN_QUEUE,COUNT_TRANSACTIONS_CHECKED,COUNT_CONFLICTS_DETECTED,COUNT_TRANSACTIONS_ROWS_VALIDATING,LAST_CONFLICT_FREE_TRANSACTION,COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE,COUNT_TRANSACTIONS_REMOTE_APPLIED,COUNT_TRANSACTIONS_LOCAL_PROPOSED,COUNT_TRANSACTIONS_LOCAL_ROLLBACK from replication_group_member_stats;
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-----------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| MEMBER_ID                            | COUNT_TRANSACTIONS_IN_QUEUE | COUNT_TRANSACTIONS_CHECKED | COUNT_CONFLICTS_DETECTED | COUNT_TRANSACTIONS_ROWS_VALIDATING | LAST_CONFLICT_FREE_TRANSACTION          | COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE | COUNT_TRANSACTIONS_REMOTE_APPLIED | COUNT_TRANSACTIONS_LOCAL_PROPOSED | COUNT_TRANSACTIONS_LOCAL_ROLLBACK |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-----------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+
| e0dd6e3d-8936-11ea-9176-0242ac150003 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                                21 |                               146 |                                 0 |
|  e3f0850e-8936-11ea-98ba-0242ac150004 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                               151 |                                17 |                                 0 |
| e4a14f46-8936-11ea-b379-0242ac150005 |                           0 |                        167 |                        0 |                                  1 | 8cb61fd9-8931-11ea-ad6f-0242ac110003:43 |                                          0 |                               166 |                                 4 |                                 0 |
+--------------------------------------+-----------------------------+----------------------------+--------------------------+------------------------------------+-----------------------------------------+--------------------------------------------+-----------------------------------+-----------------------------------+-----------------------------------+

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到：&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_IN_QUEUE&lt;/strong&gt;： 三个节点+1&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_LOCAL_PROPOSED&lt;/strong&gt;：5501加1（由于事务从5501发出），其它节点不变&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_REMOTE_APPLIED&lt;/strong&gt;：5502、5503均加1，两个节点均为接收5501节点的事务&lt;br /&gt;
 &lt;strong&gt;COUNT_TRANSACTIONS_ROWS_VALIDATING&lt;/strong&gt;：三节点均+1&lt;br /&gt;
 Number of transaction rows which can be used for certification, but have not been garbage collected. Can be thought of as the current size of the conflict detection database against which each transaction is certified.&lt;br /&gt;
 未被GC的用以冲突检测的事务行数，该值会按照一定频率清零（已执行完成的事务，writeset存储在certification_info的数据结构中，而每当事务结束后，各个节点会每隔（在MySQL社区版中broadcast_gtid_executed_period_var硬编码为）60秒广播一次自己节点的gtid_executed。延续阅读：https://zhuanlan.zhihu.com/p/55323854）。&lt;br /&gt;
\&lt;/p&gt;

&lt;div class=&quot;wp-video&quot; style=&quot;width: 1280px;&quot;&gt;&lt;video class=&quot;wp-video-shortcode&quot; controls=&quot;controls&quot; height=&quot;720&quot; id=&quot;video-1123-3&quot; preload=&quot;metadata&quot; width=&quot;1280&quot;&gt;&lt;source src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-06-0154.mp4?_=3&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;&amp;lt;http://codercoder.cn/wp-content/uploads/2020/05/2020-06-0154.mp4&amp;gt;&lt;/video&gt;&lt;/div&gt;
&lt;p&gt;[/video] # 三、MGR_ProxySQL&lt;/p&gt;

&lt;p&gt;了解了MGR的集群后，还需要在该集群上进行代理的搭建，以便于读写及宕机等情况的调度，完成高可用。常用的解决方案有：ProxySQL和MySQL Router。现简单介绍下ProxySQL+MGR：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2481.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
 即：ProxySQL作为数据库集群的代理，Client通过连接ProxySQL访问数据库，ProxySQL则按照配置的规则，将请求分发到不同的MySQL实例，而ProxySQL后端的MySQL实例，为原生的MGR集群。ProxySQL可查阅：&lt;a href=&quot;http://codercoder.cn/index.php/2020/05/mysql-note19-mysql-proxy-tool-proxysql/&quot;&gt;MySQL手记19 — MySQL代理工具ProxySQL&lt;/a&gt;&lt;br /&gt;
效果为：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-06-0143.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;对于MGR高可用的架构，5.7后的讨论声越来越多，值得我们逐渐在生产环境中使用。MySQL官方也在不断添加相应的内容，使MGR更加可控稳定，例如group_replication_exit_state_action为了让事务的控制更为精细，group_replication_consistency让集群更稳定…再配合着代理，能够让宕机、网络差、读写切换等运维操作更加方便。(http://codercoder.cn/index.php/2020/05/mysql-note19-mysql-proxy-tool-proxysql/)）。&lt;/p&gt;

&lt;p&gt;欢迎关注公众号：&lt;strong&gt;朔的话&lt;/strong&gt;：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/04/2020-04-2693.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2020 18:55:03 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/05/mysql-note-20-mysql-group-replication/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/05/mysql-note-20-mysql-group-replication/</guid>
        
        <category>MySQL手记</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>MySQL手记19 &amp;#8212; MySQL代理工具ProxySQL</title>
        <description>&lt;h1 id=&quot;介绍&quot;&gt;介绍&lt;/h1&gt;

&lt;p&gt;ProxySQL是一个MySQL集群架构的代理，由于其本身支持高可用，常被用作包括Master-Slave，MGR在内的集群结构的代理。&lt;br /&gt;
https://proxysql.com/documentation/&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2481.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
图片来源：https://www.percona.com/blog/2017/07/20/where-do-i-put-proxysql/&lt;/p&gt;

&lt;h1 id=&quot;一安装部署&quot;&gt;一、安装部署&lt;/h1&gt;

&lt;p&gt;proxySQL支持直接使用rpm包安装，所以过程较为简单。&lt;br /&gt;
在官网上下载rom包：&lt;br /&gt;
https://proxysql.com/documentation/installing-proxysql/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[root@node1 proxysql]# rpm -ivh proxysql-2.0.12-1-centos7.x86_64.rpm
warning: proxysql-2.0.12-1-centos7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID 79953b49: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:proxysql-2.0.12-1                warning: group proxysql does not exist - using root
warning: group proxysql does not exist - using root
################################# [100%]
Created symlink from /etc/systemd/system/multi-user.target.wants/proxysql.service to /etc/systemd/system/proxysql.service.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中：&lt;br /&gt;
 默认配置文件：/etc/proxysql.cnf&lt;br /&gt;
 默认数据路径：/var/lib/proxy&lt;br /&gt;
 ProxySQL默认管理端口：6032&lt;br /&gt;
 ProxySQL默认client端口：6033&lt;/p&gt;

&lt;p&gt;启动：&lt;br /&gt;
proxySQL可以先启动，再进行配置，所以可以在启动后添加相应的配置项：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;systemctl start proxysql

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看启动状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;systemctl status proxysql -l
● proxysql.service - LSB: High Performance Advanced Proxy for MySQL
   Loaded: loaded (/etc/rc.d/init.d/proxysql; bad; vendor preset: disabled)
   Active: active (running) since Fri 2020-05-22 12:08:10 UTC; 59s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 62807 ExecStart=/etc/rc.d/init.d/proxysql start (code=exited, status=0/SUCCESS)
   CGroup: /docker/b0d7120efb2f7b0ae3a5344d6e1ce509d1e841ad238f2fc1ae4ca22ca5358aff/system.slice/proxysql.service
           ├─62811 proxysql -c /etc/proxysql.cnf -D /var/lib/proxysql
           └─62812 proxysql -c /etc/proxysql.cnf -D /var/lib/proxysql

May 22 12:08:10 dev-mysql-248110 systemd[1]: Starting LSB: High Performance Advanced Proxy for MySQL...
May 22 12:08:10 dev-mysql-248110 proxysql[62807]: Starting ProxySQL: 2020-05-22 12:08:10 [INFO] Using config file /etc/proxysql.cnf
May 22 12:08:10 dev-mysql-248110 proxysql[62807]: DONE!
May 22 12:08:10 dev-mysql-248110 systemd[1]: Started LSB: High Performance Advanced Proxy for MySQL.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;登录proxySQL进行管理（默认只能本地127.0.0.1登录，由于proxySQL所需的用户权限要求较高，防止出现安全问题）：&lt;br /&gt;
 用户名/密码：admin:admin&lt;br /&gt;
 web页面开关（默认用户名密码：stats/stats）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; show variables like '%web%';
+-------------------+-------+
| Variable_name     | Value |
+-------------------+-------+
| admin-web_enabled | false |
| admin-web_port    | 6080  |
+-------------------+-------+
2 rows in set (0.00 sec)

mysql&amp;gt; set admin-web_enabled=1;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; load admin variables to run;
Query OK, 0 rows affected (0.00 sec)

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proxysql的结构&quot;&gt;ProxySQL的结构&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;第一层：RUNTIME&lt;/strong&gt;&lt;br /&gt;
 目前在运行中的ProxySQL的配置，RUNTIME的配置是不能修改的，可以将其当作一个状态。修改需要从MEMORY层加载。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二层：MEMORY&lt;/strong&gt;&lt;br /&gt;
 已在内存中的配置，为数据加载的中间层。ProxySQL启动时，从磁盘中读取配置文件，放到内存中，再将内存中的数据加载到RUNTIME层。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三层：DISK/CONFIG FILE&lt;/strong&gt;&lt;br /&gt;
 ProxySQL在磁盘上为SQLite数据库，所以需要将在内存中的数据，加载到磁盘中，否则重启proxySQL后会丢失内存中的信息。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2479.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如需要修改MySQL的变量，对应的指令为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;LOAD MYSQL VARIABLES TO RUNTIME;
 SAVE MYSQL VARIABLES TO DISK;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;三基本信息&quot;&gt;三、基本信息&lt;/h1&gt;

&lt;p&gt;登录管理后台，执行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; show databases;
+-----+---------------+-------------------------------------+
| seq | name          | file                                |
+-----+---------------+-------------------------------------+
| 0   | main          |                                     |
| 2   | disk          | /var/lib/proxysql/proxysql.db       |
| 3   | stats         |                                     |
| 4   | monitor       |                                     |
| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |
+-----+---------------+-------------------------------------+
5 rows in set (0.00 sec)


mysql&amp;gt; show tables;
+--------------------------------------------+
| tables                                     |
+--------------------------------------------+
| global_variables                           |
| mysql_collations                           |
| mysql_group_replication_hostgroups         |
| mysql_query_rules                          |
| mysql_query_rules_fast_routing             |
| mysql_replication_hostgroups               |
| mysql_servers                              |
| mysql_users                                |
| proxysql_servers                           |
| runtime_checksums_values                   |
| runtime_global_variables                   |
| runtime_mysql_group_replication_hostgroups |
| runtime_mysql_query_rules                  |
| runtime_mysql_query_rules_fast_routing     |
| runtime_mysql_replication_hostgroups       |
| runtime_mysql_servers                      |
| runtime_mysql_users                        |
| runtime_proxysql_servers                   |
| runtime_scheduler                          |
| scheduler                                  |
+--------------------------------------------+

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;常用的三类表&quot;&gt;常用的三类表&lt;/h2&gt;

&lt;h3 id=&quot;1变量&quot;&gt;（1）变量：&lt;/h3&gt;

&lt;p&gt;ProxySQL作为一个代理，其必然会包含许多MySQL的参数：&lt;br /&gt;
 &lt;strong&gt;数据库相关：&lt;/strong&gt;max_connection、max_allowed_packed、wait_timeout、字符集等等。&lt;br /&gt;
 &lt;strong&gt;限制相关：&lt;/strong&gt;连接请求次数、数据包大小…&lt;br /&gt;
 &lt;strong&gt;检测相关：&lt;/strong&gt;连接的心跳状态、失败情况…&lt;br /&gt;
在配置上极为灵活，可以通过global_variables表进行查看，修改后，别忘记：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;LOAD MYSQL VARIABLES TO RUNTIME;
 SAVE MYSQL VARIABLES TO DISK;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改的值加载到runtime，并保存在磁盘中。&lt;/p&gt;

&lt;h3 id=&quot;2mysql实例用户&quot;&gt;（2）MySQL实例、用户：&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;添加MySQL的实例：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; insert into mysql_servers (hostgroup_id, hostname, port) values(1, '172.16.120.209', 5501);

mysql&amp;gt; select * from mysql_servers \G
*************************** 1. row ***************************
      hostgroup_id: 1
          hostname: 172.16.120.209
              port: 5501
            status: OFFLINE_HARD
            weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
    max_latency_ms: 0
            comment:

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以从该表中，看到对应实例的运行情况：&lt;strong&gt;报错host、status、weight&lt;/strong&gt;等。&lt;/p&gt;

&lt;p&gt;修改MySQL的实例信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;LOAD MYSQL SERVERS TO RUNTIME;
SAVE MYSQL SERVERS TO DISK;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加MySQL用户：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;INSERT INTO mysql_users(username,password,default_hostgroup) VALUES ('proxyuser','proxypasswd',0);

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接查看该表，密码是明文的，不安全，所以需要进行密码的加密：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;mysql&amp;gt; save mysql users from runtime;

 mysql&amp;gt; select * from mysql_users \G
*************************** 1. row ***************************
              username: root
              password: *FE1E37A7390CE06FF73D46CE034FE0C9A59A9681
                active: 1
              use_ssl: 0
    default_hostgroup: 1
        default_schema:
        schema_locked: 0
transaction_persistent: 1
          fast_forward: 0
              backend: 1
              frontend: 1
      max_connections: 10000

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;transaction_persistent&lt;/strong&gt;，同一个事务的查询，必须分发在一个节点，1.4版本后默认为打开：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2467.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/sysown/proxysql/commit/b89de59f06261eac038c89ed3be5c083ceadfaa8&lt;/p&gt;

&lt;p&gt;修改MySQL的用户信息，修改后，同样别忘记：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;LOAD MYSQL USERS TO RUNTIME;
 SAVE MYSQL USERS TO DISK;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3scheduler定时任务&quot;&gt;（3）scheduler定时任务&lt;/h3&gt;

&lt;p&gt;对于集群的管理，我们还可以写脚本，来完成自动的节点上下线，切换为从节点等的一些操作。这个时候，就可以使用scheduler表进行配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;insert into scheduler(id, active, interval_ms, filename, arg1, arg2, arg3, arg4) values(1, 1, 3000, '/var/lib/proxysql/gr_mw_mode_sw_cheker.sh', 1, 2, 1, '/var/lib/proxysql/checker.log');

mysql&amp;gt; select * from scheduler \G
*************************** 1. row ***************************
        id: 1
    active: 1
interval_ms: 3000
  filename: /var/lib/proxysql/gr_mw_mode_sw_cheker.sh
      arg1: 1
      arg2: 1
      arg3: 1
      arg4: /var/lib/proxysql/checker.log
      arg5: NULL
    comment:

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按照文档的介绍：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-2466.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;id：&lt;/strong&gt;scheduler的全剧唯一job id&lt;br /&gt;
 &lt;strong&gt;active&lt;/strong&gt;：1为在运行中，否则即没有激活&lt;br /&gt;
 &lt;strong&gt;interval_ms&lt;/strong&gt;：执行周期，单位毫秒，最小值为100ms&lt;br /&gt;
 &lt;strong&gt;filename&lt;/strong&gt;：可执行脚本的文件绝对路径&lt;br /&gt;
 &lt;strong&gt;arg1~arg5&lt;/strong&gt;：可以传递给脚本的参数&lt;br /&gt;
 &lt;strong&gt;comment&lt;/strong&gt;：备注&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结：&lt;/h1&gt;

&lt;p&gt;本文简单介绍了ProxySQL这一强大且灵活的MySQL代理，需要按需进行测试，包括对于连接的转发是否均衡、节点宕机是否能够将连接发到其它节点、是否能够承受住非常大量的连接、自身的高可用等。&lt;br /&gt;
 数据库加了一层代理，还需要考虑到代理与实例间的延迟，对延迟敏感的业务是否适用。对于MySQL的集群，需要稳定、灵活且方便的进行管理，包括之前介绍的MySQL高可用集群拓扑结构管理工具Orchestrator，本篇的ProxySQL等，都是集群运维中的一个部分，需要我们谨慎的完成管理。&lt;/p&gt;

&lt;p&gt;欢迎关注公众号：&lt;strong&gt;朔的话&lt;/strong&gt;：&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/04/2020-04-2693.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2020 18:04:29 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/05/mysql-note19-mysql-proxy-tool-proxysql/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/05/mysql-note19-mysql-proxy-tool-proxysql/</guid>
        
        <category>MySQL手记</category>
        
        <category>Tech</category>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>好剧推荐2 &amp;#8212; 外星也难民(Solar Opposites)</title>
        <description>&lt;p&gt;上次推荐了《瑞克和莫蒂》，苦苦等待的第四季第6集5月8号才更新，足足等了将近半年～ 在找其它的动画的时候，突然发现一部超有趣的《外星也难民》，与《瑞克和莫蒂》是同一个主创：Justin Roiland，也太有才了。&lt;/p&gt;

&lt;p&gt;这两个剧有一个我很喜欢的共同点：通过动画的方式，简单直接的反应当下社会的情况：包括科技、成长、偏见、信仰、人性、嘲讽、种族等等，其中的一些，是没有办法出现在荧幕上的。&lt;br /&gt;
&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-16100.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我目前也还在追剧，第一季已经全部更新了，讲的是一个外星人家庭，由于自己的星球没小行星撞击，所以逃难迫降到地球，在地球上生活的故事。&lt;/p&gt;

&lt;p&gt;Justin Roiland厉害就厉害在，动画中单独拎出的某一个场景，就可以作为一个新的动画主题，可见其功力之深厚。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://codercoder.cn/wp-content/uploads/2020/05/2020-05-1620.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 May 2020 22:19:23 +0800</pubDate>
        <link>http://localhost:4000/index.php/2020/05/recommending-2-solar-opposites/</link>
        <guid isPermaLink="true">http://localhost:4000/index.php/2020/05/recommending-2-solar-opposites/</guid>
        
        <category>LOL-7788</category>
        
        
        <category>LOL-7788</category>
        
      </item>
    
  </channel>
</rss>
